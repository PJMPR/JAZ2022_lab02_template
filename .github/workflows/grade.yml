name: Grade segments

on:
  push:
    branches: [ "**" ]
  pull_request:
    branches: [ "**" ]

jobs:
  grade:
    runs-on: ubuntu-latest

    env:
      # DOSTOSUJ w razie potrzeby:
      PROJECT_DIR: hierarchical-collections
      MAIN_CLASS: pl.pjatk.jaz.Main
      # Maksymalna liczba segmentów (do tabeli w podsumowaniu):
      MAX_SEGMENTS: "10"

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Java 17 (Temurin) with cache
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: "17"
          cache: "maven"   # automatycznie przełączy na "gradle" jeśli użyjemy Gradle'a

      - name: Detect build tool
        id: bt
        run: |
          cd "$PROJECT_DIR"
          if [ -f "mvnw" ] || [ -f "pom.xml" ]; then
            echo "tool=maven" >> $GITHUB_OUTPUT
          elif [ -f "gradlew" ] || [ -f "build.gradle" ] || [ -f "build.gradle.kts" ]; then
            echo "tool=gradle" >> $GITHUB_OUTPUT
          else
            echo "Nie wykryto Mavena ani Gradle'a"; exit 1
          fi

      - name: Build
        run: |
          set -e
          cd "$PROJECT_DIR"
          if [ "${{ steps.bt.outputs.tool }}" = "maven" ]; then
            # mvnw jeśli jest, w przeciwnym razie mvn
            if [ -f "./mvnw" ]; then MVN=./mvnw; else MVN=mvn; fi
            $MVN -q -DskipTests package
            # wykrycie classpath (target/classes + zależności z lokalnego repo, gdy potrzebne)
            echo "CP=target/classes$(printf :$(find target/dependency -name '*.jar' 2>/dev/null) | tr -d '\n')" >> $GITHUB_ENV
          else
            if [ -f "./gradlew" ]; then GRAD=./gradlew; else GRAD=gradle; fi
            $GRAD -q clean build -x test
            # standardowy classpath Gradle (build/classes/java/main + jars z build/libs gdy fat-jar nie powstał)
            echo "CP=build/classes/java/main$(printf :$(ls build/libs/*.jar 2>/dev/null) | tr -d '\n')" >> $GITHUB_ENV
          fi

      - name: Run Main and capture output
        id: runmain
        run: |
          set -e
          cd "$PROJECT_DIR"
          # Spróbuj uruchomić po FQCN:
          if [ -n "$CP" ]; then
            java -cp "$CP" "$MAIN_CLASS" | tee ../program_output.txt
          else
            # awaryjnie spróbuj uruchomienia przez Maven exec (jeśli skonfigurowany)
            if [ -f "./mvnw" ]; then MVN=./mvnw; else MVN=mvn; fi
            $MVN -q -Dexec.mainClass="$MAIN_CLASS" exec:java | tee ../program_output.txt
          fi
          echo "OUTPUT_PATH=$(realpath ../program_output.txt)" >> $GITHUB_OUTPUT

      - name: Score (count passed segments)
        id: score
        run: |
          set -e
          OUT="program_output.txt"
          cd "$PROJECT_DIR"/..
          # Wyciągnij unikalne numery segmentów z markerów [SEGMENT-x-OK]
          NUMBERS=$(grep -oE '\[SEGMENT-([0-9]+)-OK\]' "$OUT" | sed -E 's/.*SEGMENT-([0-9]+)-OK.*/\1/' | sort -n | uniq)
          POINTS=$(printf "%s\n" "$NUMBERS" | grep -c '[0-9]' || true)

          # Zbuduj tabelę do podsumowania
          echo "### Wynik uruchomienia\n" >> $GITHUB_STEP_SUMMARY
          echo "| Segment | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|---:|:---|" >> $GITHUB_STEP_SUMMARY
          for i in $(seq 1 ${MAX_SEGMENTS}); do
            if echo "$NUMBERS" | grep -qx "$i"; then
              echo "| $i | ✅ OK |" >> $GITHUB_STEP_SUMMARY
            else
              echo "| $i | ⛔️ brak |" >> $GITHUB_STEP_SUMMARY
            fi
          done
          echo -e "\n**Suma punktów:** $POINTS\n" >> $GITHUB_STEP_SUMMARY

          echo "points=$POINTS" >> $GITHUB_OUTPUT

      - name: Upload raw output (artifact)
        uses: actions/upload-artifact@v4
        with:
          name: program-output
          path: program_output.txt
          if-no-files-found: ignore

      # (opcjonalnie) ustaw status joba na failed, jeżeli 0 punktów
      - name: Fail when zero points
        if: ${{ steps.score.outputs.points == '0' }}
        run: |
          echo "Brak zaliczonych segmentów" >> $GITHUB_STEP_SUMMARY
          exit 1
