name: Grade segments (Gradle)

on:
  push:
    branches: ["**"]
  pull_request:
    branches: ["**"]

jobs:
  grade:
    runs-on: ubuntu-latest

    # Jeśli projekt leży w podkatalogu, podaj go tu (np. PROJECT_DIR: subdir)
    env:
      PROJECT_DIR: hierarchical-collections
      # FQCN klasy z main(); używane w fallbacku gdy nie ma pluginu 'application'
      MAIN_CLASS: org.example.Main
      MAX_SEGMENTS: "20"

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # (opcjonalnie) weryfikacja wrappera
      - name: Validate Gradle Wrapper
        uses: gradle/actions/wrapper-validation@v3

      - name: Setup Java 17 (Temurin) + Gradle cache
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: "17"
          cache: gradle   # <<-- kluczowe: żadnego Mavena, żadnego settings.xml

      - name: Make gradlew executable
        run: chmod +x "$PROJECT_DIR/gradlew"

      - name: Build (Gradle)
        run: |
          cd "$PROJECT_DIR"
          ./gradlew -q clean build -x test
      # Spróbuj najpierw 'gradle run' (wymaga pluginu 'application' i mainClass),
      # a jeśli nie ma takiej konfiguracji, uruchom bezpośrednio 'java -cp ...'
      - name: Run Main and capture output
        id: runmain
        shell: bash
        run: |
          set -e
          cd "$PROJECT_DIR"
          OUT=../program_output.txt
          if ./gradlew -q tasks --all | grep -qE '(^|:)run\s'; then
            # Jeśli macie plugin 'application' i mainClass, to zadziała:
            ./gradlew -q run | tee "$OUT"
          else
            # Fallback bez pluginu 'application'
            CP="build/classes/java/main"
            if [ ! -d "$CP" ]; then
              echo "Nie znaleziono $CP (czy projekt jest w $PROJECT_DIR i zbudował się poprawnie?)"
              exit 1
            fi
            java -cp "$CP" "$MAIN_CLASS" | tee "$OUT"
          fi
          echo "OUTPUT_PATH=$(realpath $OUT)" >> $GITHUB_OUTPUT
      - name: Score (count passed segments)
        id: score
        shell: bash
        run: |
          set -e
          cd "$PROJECT_DIR"/..
          OUT="program_output.txt"
          NUMBERS=$(grep -oE '\[SEGMENT-([0-9]+)-OK\]' "$OUT" | sed -E 's/.*SEGMENT-([0-9]+)-OK.*/\1/' | sort -n | uniq || true)
          POINTS=$(printf "%s\n" "$NUMBERS" | grep -c '[0-9]' || true)
          echo "### Wynik uruchomienia\n" >> $GITHUB_STEP_SUMMARY
          echo "| Segment | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|---:|:---|" >> $GITHUB_STEP_SUMMARY
          for i in $(seq 1 ${MAX_SEGMENTS}); do
            if echo "$NUMBERS" | grep -qx "$i"; then
              echo "| $i | ✅ OK |" >> $GITHUB_STEP_SUMMARY
            else
              echo "| $i | ⛔️ brak |" >> $GITHUB_STEP_SUMMARY
            fi
          done
          echo -e "\n**Suma punktów:** $POINTS\n" >> $GITHUB_STEP_SUMMARY
          echo "points=$POINTS" >> $GITHUB_OUTPUT
      - name: Upload raw output (artifact)
        uses: actions/upload-artifact@v4
        with:
          name: program-output
          path: program_output.txt
          if-no-files-found: ignore

      - name: Fail when zero points (optional)
        if: ${{ steps.score.outputs.points == '0' }}
        run: |
          echo "Brak zaliczonych segmentów" >> $GITHUB_STEP_SUMMARY
          exit 1